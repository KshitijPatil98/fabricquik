set -x

TYPE=$1
ORGNAME=$2


. ${PWD}/script_files/channel/${ORGNAME}/utils.sh


infoln "Let us check if peer images and fabric binaries are in sync"

peer version > /dev/null 2>&1

if [[ $? -ne 0 || ! -d "../config" ]]; then
  errorln "Peer binary and configuration files not found.."
  errorln
  errorln "Follow the instructions in the Fabric docs to install the Fabric Binaries:"
  errorln "https://hyperledger-fabric.readthedocs.io/en/latest/install.html"
  exit 1
fi

# use the fabric tools container to see if the samples and binaries match your
# docker images
LOCAL_VERSION=$(peer version | sed -ne 's/^ Version: //p')
DOCKER_IMAGE_VERSION=$(docker run --rm hyperledger/fabric-tools:latest peer version | sed -ne 's/^ Version: //p')

infoln "LOCAL_VERSION=$LOCAL_VERSION"
infoln "DOCKER_IMAGE_VERSION=$DOCKER_IMAGE_VERSION"

if [ "$LOCAL_VERSION" != "$DOCKER_IMAGE_VERSION" ]; then
  warnln "Local fabric binaries and docker images are out of sync. This may cause problems."
fi


infoln "Let us check if fabric ca images and fabric binaries are in sync"

fabric-ca-client version > /dev/null 2>&1

if [[ $? -ne 0 ]]; then
  errorln "fabric-ca-client binary not found.."
  errorln
  errorln "Follow the instructions in the Fabric docs to install the Fabric Binaries:"
  errorln "https://hyperledger-fabric.readthedocs.io/en/latest/install.html"
  exit 1
fi

CA_LOCAL_VERSION=$(fabric-ca-client version | sed -ne 's/ Version: //p')
CA_DOCKER_IMAGE_VERSION=$(docker run --rm hyperledger/fabric-ca:latest fabric-ca-client version | sed -ne 's/ Version: //p' | head -1)
infoln "CA_LOCAL_VERSION=$CA_LOCAL_VERSION"
infoln "CA_DOCKER_IMAGE_VERSION=$CA_DOCKER_IMAGE_VERSION"

if [ "$CA_LOCAL_VERSION" != "$CA_DOCKER_IMAGE_VERSION" ]; then
  warnln "Local fabric-ca binaries and docker images are out of sync. This may cause problems."
fi


infoln "Lets start the tlsca container for the ${ORGNAME} organization"

docker-compose -f ${PWD}/compose_files/tlsca/${ORGNAME}/tlsca.yaml up -d

sleep 2

successln "tlsca container for the ${ORGNAME} organization successfully started"

#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

infoln "Lets generate tls artifacts for all the components of ${ORGNAME}(orgca,peer0,peer1 etc) "

sudo chmod +x ${PWD}/script_files/tlscerts/${ORGNAME}/tlscerts.sh

while :
    do
      if [ ! -f "${PWD}/organizations/tlsca_certs/${ORGNAME}/ca-cert.pem" ]; then
        sleep 2
      else
        break
      fi
    done

 
bash ${PWD}/script_files/tlscerts/${ORGNAME}/tlscerts.sh

sleep 2

successln "The tls artifacts are created successfully for all the components of ${ORGNAME} organization."


#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

infoln "-Now lets copy the tls x509 cert and key of rca admin (nothing but orgca) to the tls folder so that we can bootstrap the orgca for ${ORGNAME} organization"

cp ${PWD}/organizations/tlsca_certs/${ORGNAME}/users/rca_admin/msp/keystore/* ${PWD}/organizations/orgca_certs/${ORGNAME}/tls/key.pem
cp ${PWD}/organizations/tlsca_certs/${ORGNAME}/users/rca_admin/msp/signcerts/* ${PWD}/organizations/orgca_certs/${ORGNAME}/tls/cert.pem

sleep 2

successln "successfully copied the files"
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

infonln "Lets start the orgca container for the ${ORGNAME} organization"

docker-compose -f ${PWD}/compose_files/orgca/${ORGNAME}/orgca.yaml up -d


sleep 2

successln " orgca container successfully started for ${ORGNAME} organization"

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
infon "Lets generate certificates for all the components of this ${ORGNAME} organization(peer0,peer1,admin etc)-"

sudo chmod +x ${PWD}/script_files/orgcerts/${ORGNAME}/orgcerts.sh


#Here again we are using tlsca ca cert because tls certificates for all the components is generated by tlsca. So in order to confirm those we will need to use ca cert of tlsca and not orgca
while :
    do
      if [ ! -f "${PWD}/organizations/tlsca_certs/${ORGNAME}/ca-cert.pem" ]; then
        sleep 2
      else
        break
      fi
    done

 
bash ${PWD}/script_files/orgcerts/${ORGNAME}/orgcerts.sh

sleep 2

successln "All org artifacts are successfully created for ${ORGNAME} organization"

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if [ "$TYPE" == "org" ] || [ "$TYPE" == "owner" ]; then

  infoln "Now that certificates are created lets starts containers(peers and couch) for ${ORGNAME} organization. We will also start the cli container"

  docker-compose -f ${PWD}/compose_files/peer_couch_orderer/${ORGNAME}/peer.yaml -f ${PWD}/compose_files/peer_couch_orderer/${ORGNAME}/couch.yaml  up -d
  sleep 2 

  # infoln "Let us now start the cli container"
  docker-compose -f ${PWD}/compose_files/peer_couch_orderer/${ORGNAME}/cli.yaml up -d
  sleep 2

  successln "All the containers for ${ORGNAME} are up and running"

fi

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if [ "$TYPE" == "orderer" ]; then

  infoln "Now that certificates are created lets starts orderer nodes of ${ORGNAME} organization"

  docker-compose -f ${PWD}/compose_files/peer_couch_orderer/${ORGNAME}/orderer.yaml up -d

  sleep 2

  successln "All the containers for ${ORGNAME} are up and running"

fi
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

if [ "$TYPE" == "org" ] || [ "$TYPE" == "owner" ]; then

  echo "Generate connection profile";

  infoln "Lets generate connection files for ${ORGNAME} organization and copy to the specified folder"

  sudo chmod +x ${PWD}/script_files/ccp/${ORGNAME}/ccp-generate.sh
  bash ${PWD}/script_files/ccp/${ORGNAME}/ccp-generate.sh


fi

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


successln "BINGOOOOOO, ALL THE COMPONENTS ARE UP AND READY TO GO. YOU CAN NOW GO AHEAD AND ONBOARD A NEW ORG,CREATE A CHANNEL WITH THIS NEW ORG AND DEPLOY CHAINCODE"


{ set +x; } 2>/dev/null

